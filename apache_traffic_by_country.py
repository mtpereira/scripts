#!/usr/bin/env python

# Manuel Tiago Pereira (mt.pereira@gmail.com)
#
# Receives Apache common log files, either by stdin or by argument (file name)
# and prints the amount of traffic generated by country, in descending order
# by traffic. IP information is retrieved from http://api.hostip.info.
#
# Typical usage: ./apache_traffic_by_country.py [LOG FILE]...
# or: cat [LOG FILE] | ./apache_traffic_by_country.py

from datetime import datetime, timedelta
from collections import defaultdict
from urllib import urlopen
import re
import json
import fileinput

def is_delta_from_now(date_string, delta):
  """Receives a date string of apache common log format
     and return true or false if the date is 
     'delta' minutes or less from now.
     Format: [day/month/year:hour:minute:second zone]"""
  # Zone offset has to be dealt "manually", 
  # see http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior
  date_log = datetime.strptime(date_string[:-6], "%d/%b/%Y:%H:%M:%S")
  date_log_zone = int(date_string[-5:])
  date_log_offset = timedelta(hours = date_log_zone / 100)
  date_log -= date_log_offset
  date_diff = datetime.now() - date_log
  return date_diff.seconds < delta

def get_country():
  """Closure for returning country name by IP. Closure used so the results are
     cached by /24 subnet. 
     Cache entries look like: '217.162.2' : country_name"""
  cache = {}
  def get_country_cache(ip):
    last_dot = ip.rfind(".")
    subnetted = ip[0:last_dot + 1]
    print subnetted
    try: 
      return cache[subnetted]
    except KeyError:
      api = "http://api.hostip.info/get_json.php"
      answer = json.loads(urlopen(api + "?ip=" + ip).read())['country_name']
      cache[subnetted] = answer
      return answer
  return get_country_cache

def get_traffic_ip(log_line):
  """Returns a tuple IP - amount of traffic or False if the delta is > 60 
     minutes for a given apache common log line.
     Line format: '%h %l %u %t \"%r\" %>s %b'"""
  delta = 3600
  logre = re.compile(r'^'
    r'(?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    r' \S+ \S+ '
    r'\[(?P<date>.+)\]'
    r' ".+" \d+ '
    r'(?P<traffic>.*)$')
  matches = logre.match(log_line)
  if matches is not None:
    ip = matches.group('ip')
    date = matches.group('date')
    traffic = float(matches.group('traffic'))
    if is_delta_from_now(date, delta):
      return (ip, traffic)
  else: # if not matched or delta is out of range, returns false
    return False

def main():
  traffic_per_ip = defaultdict(float)
  traffic_per_country = defaultdict(float)
  countries = get_country()
  # get traffic and ip of log lines 
  # only if they are < 60 minutes from now
  for line in fileinput.input():
    traffic_ip = get_traffic_ip(line)
    if traffic_ip:
      ip, traffic = traffic_ip
      traffic_per_ip[ip] += traffic
  # translate ip to country and sum it all up
  for ip in traffic_per_ip:
    country = countries(ip)
    traffic_per_country[country] += traffic_per_ip[ip]
  # print results sorted by traffic
  for country in sorted(traffic_per_country, key=traffic_per_country.get, reverse=True):
    print "%s bytes - %s" % (traffic_per_country[country], country)

if __name__ == "__main__":
    main()

